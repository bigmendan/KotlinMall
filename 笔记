
RxJava 线程调度:
 使用 RxJava 做一个定时器  可以替换 Handler
  Observable.timer(2, TimeUnit.SECONDS)
             .observeOn(AndroidSchedulers.mainThread())
             .subscribe {
                 bottomNavBar.checkCartBadge(3)
             }

       === 表示在主线程中 延时操作 2 秒
       |
       |== RxJava 线程切换  就是靠 observeOn ()  和 subscribeOn()
               |
               |== ObserveOn 指定一个观察者在哪个调度器上观察这个Observable
               |
               |== subscribeOn 指定Observable 自身在哪个调度器上执行


        比如 在 结合 Retrofit 使用时经常用到
                .observeOn(AndroidSchedulers.mainThread())
                .subscribeOn(Schedulers.io())

               就是说做网络请求时 本身是在异步 一个IO线程中进行的，网络请求完成需要切换到主线程，所以观察者观察主线程

  Kotlin中  by lazy 的 作用 ：
        lazy 只能用于修饰常量 val，并且 lazy 是线程安全的。
        lazy 在第一次被调用时就被初始化，以后调用该属性会返回之前的结果


  let () 方法
        str?.let{ mTv.text = it }   表示 如果str 不为空 就会执行后面的操作，
                并把自身作为参数传递到方法中


   mutableList.all{ }   这个方法使用来判断集合中所有元素怎么怎么样 ,返回值是 Boolean;
    mutableList.filter{ it.xxx } 过滤 括号里面的条件
    mutableList.map{  }  数据转换一下   map{ it.goodsCount * it.goodsPrice }.sum()
